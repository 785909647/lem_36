{"name": "test_ret_invest[case16]", "status": "failed", "statusDetails": {"message": "AssertionError: assert (Decimal('594586.42') - Decimal('594586.42')) == 100", "trace": "case = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":True}', 'auto_script': 'OK', 'case_id': 17, 'check_sql': 1, ...}\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_ret_invest(case):\n        data = eval(case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = eval(case[\"excepted\"])\n        if not headers[\"Authorization\"]:\n            headers[\"Authorization\"] = get_obj.get_token[\"jietoken\"]\n        else:\n            headers[\"Authorization\"] = get_obj.get_token[\"shentoken\"]\n    \n        if case[\"check_sql\"]:\n            if str(case[\"check_sql\"]).isdigit():\n                front_amount = get_obj.get_amount\n            else:\n                str_ret = case[\"check_sql\"]\n                re_data = data[\"member_id\"]\n                str_ret.replace(\"#jie_id#\",re_data)\n                front_amount = get_obj.get_amount\n                with Midd_Ware.my_sql as f:\n                    amount = f.query(str_ret)\n                print(\"修改前账户余额{}  修改后账户余额{}\".format(front_amount,amount))\n    \n    \n    \n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"], url=get_obj.invest_url, data=json.dumps(data), headers=headers)\n        respose.pop(\"copyright\")\n        Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=10, value=str(respose[\"msg\"]))\n        # 断言\n        try:\n            case_stutas = False\n            for k,v in excepted.items():\n                assert respose[k] == excepted[k]\n                if not respose[\"code\"]:\n                    case_stutas  = True\n                    behind_amount = get_obj.get_amount\n                    assert front_amount -  behind_amount  == data[\"amount\"]\n    \n            Midd_Ware.logger.info(\"第{}条测试用例通过,请求参数是{}\".format(case[\"case_id\"], data))\n            Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"pass\")\n        except AssertionError as e:\n            Midd_Ware.logger.info(\n                \"第{}条测试用例不通过 ！\\n 请求体是{} 请求内容是{}。预期结果是{}---返回结果是{}\".format(case[\"case_id\"], data, case[\"title\"], excepted,\n                                                                          respose[\"msg\"]))\n            if case_stutas:\n                Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"failure/ 请求前余额{},请求后余额{}\".format(front_amount,behind_amount))\n            else:\n                Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"failure\")\n>           raise e\n\ntest_ret.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":True}', 'auto_script': 'OK', 'case_id': 17, 'check_sql': 1, ...}\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_ret_invest(case):\n        data = eval(case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = eval(case[\"excepted\"])\n        if not headers[\"Authorization\"]:\n            headers[\"Authorization\"] = get_obj.get_token[\"jietoken\"]\n        else:\n            headers[\"Authorization\"] = get_obj.get_token[\"shentoken\"]\n    \n        if case[\"check_sql\"]:\n            if str(case[\"check_sql\"]).isdigit():\n                front_amount = get_obj.get_amount\n            else:\n                str_ret = case[\"check_sql\"]\n                re_data = data[\"member_id\"]\n                str_ret.replace(\"#jie_id#\",re_data)\n                front_amount = get_obj.get_amount\n                with Midd_Ware.my_sql as f:\n                    amount = f.query(str_ret)\n                print(\"修改前账户余额{}  修改后账户余额{}\".format(front_amount,amount))\n    \n    \n    \n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"], url=get_obj.invest_url, data=json.dumps(data), headers=headers)\n        respose.pop(\"copyright\")\n        Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=10, value=str(respose[\"msg\"]))\n        # 断言\n        try:\n            case_stutas = False\n            for k,v in excepted.items():\n                assert respose[k] == excepted[k]\n                if not respose[\"code\"]:\n                    case_stutas  = True\n                    behind_amount = get_obj.get_amount\n>                   assert front_amount -  behind_amount  == data[\"amount\"]\nE                   AssertionError: assert (Decimal('594586.42') - Decimal('594586.42')) == 100\n\ntest_ret.py:176: AssertionError"}, "attachments": [{"name": "log", "source": "24df3ead-28c2-4c23-9aa6-87c259b1b60b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a8b2bd5a-4056-4172-801c-77633ea7d235-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 17, 'interface': '投资', 'url': '/member/invest', 'method': 'post', 'title': '管理员投资', 'data': '{\"member_id\":\"1000337288\",\"loan_id\":\"2064715\",\"amount\":100}', 'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":True}', 'excepted': '{\"code\":0,\"msg\":\"OK\"}', 'result': 'failure/ 请求前余额594586.42,请求后余额594586.42', 'auto_script': 'OK', 'check_sql': 1}"}], "start": 1619409148501, "stop": 1619409149089, "uuid": "9b01f064-f7be-4353-8f0b-ecab14bb4572", "historyId": "ea144d5589ed1788bbec51936bb3d677", "testCaseId": "4301158e23dffc3fa8c1c0d25eb5aff8", "fullName": "test_ret#test_ret_invest", "labels": [{"name": "suite", "value": "test_ret"}, {"name": "host", "value": "DESKTOP-AC1MULO"}, {"name": "thread", "value": "30072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ret"}]}