{"name": "test_ret_invest[case1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 2", "trace": "case = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":None}', 'auto_script': 'OK', 'case_id': 2, 'check_sql': None, ...}\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_ret_invest(case):\n        data = eval(case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = eval(case[\"excepted\"])\n        if not headers[\"Authorization\"]:\n            headers[\"Authorization\"] = get_obj.get_token[\"jietoken\"]\n        else:\n            headers[\"Authorization\"] = get_obj.get_token[\"shentoken\"]\n    \n        if case[\"check_sql\"]:\n            if str(case[\"check_sql\"]).isdigit():\n                front_amount = get_obj.get_amount\n            else:\n                str_ret = case[\"check_sql\"]\n                re_data = data[\"member_id\"]\n                str_ret.replace(\"#jie_id#\",re_data)\n                front_amount = get_obj.get_amount\n                with Midd_Ware.my_sql as f:\n                    amount = f.query(str_ret)\n                print(\"修改前账户余额{}  修改后账户余额{}\".format(front_amount,amount))\n    \n    \n    \n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"], url=get_obj.invest_url, data=json.dumps(data), headers=headers)\n        respose.pop(\"copyright\")\n        Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=10, value=str(respose[\"msg\"]))\n        # 断言\n        try:\n            case_stutas = False\n            for k,v in excepted.items():\n                assert respose[k] == excepted[k]\n                if not respose[\"code\"]:\n                    case_stutas  = True\n                    behind_amount = get_obj.get_amount\n                    assert front_amount -  behind_amount  == data[\"amount\"]\n    \n            Midd_Ware.logger.info(\"第{}条测试用例通过,请求参数是{}\".format(case[\"case_id\"], data))\n            Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"pass\")\n        except AssertionError as e:\n            Midd_Ware.logger.info(\n                \"第{}条测试用例不通过 ！\\n 请求体是{} 请求内容是{}。预期结果是{}---返回结果是{}\".format(case[\"case_id\"], data, case[\"title\"], excepted,\n                                                                          respose[\"msg\"]))\n            if case_stutas:\n                Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"failure/ 请求前余额{},请求后余额{}\".format(front_amount,behind_amount))\n            else:\n                Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"failure\")\n>           raise e\n\ntest_ret.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":None}', 'auto_script': 'OK', 'case_id': 2, 'check_sql': None, ...}\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_ret_invest(case):\n        data = eval(case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = eval(case[\"excepted\"])\n        if not headers[\"Authorization\"]:\n            headers[\"Authorization\"] = get_obj.get_token[\"jietoken\"]\n        else:\n            headers[\"Authorization\"] = get_obj.get_token[\"shentoken\"]\n    \n        if case[\"check_sql\"]:\n            if str(case[\"check_sql\"]).isdigit():\n                front_amount = get_obj.get_amount\n            else:\n                str_ret = case[\"check_sql\"]\n                re_data = data[\"member_id\"]\n                str_ret.replace(\"#jie_id#\",re_data)\n                front_amount = get_obj.get_amount\n                with Midd_Ware.my_sql as f:\n                    amount = f.query(str_ret)\n                print(\"修改前账户余额{}  修改后账户余额{}\".format(front_amount,amount))\n    \n    \n    \n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"], url=get_obj.invest_url, data=json.dumps(data), headers=headers)\n        respose.pop(\"copyright\")\n        Midd_Ware.excel_obj(data_path, \"invest\").write_data(row=case[\"case_id\"] + 1, column=10, value=str(respose[\"msg\"]))\n        # 断言\n        try:\n            case_stutas = False\n            for k,v in excepted.items():\n>               assert respose[k] == excepted[k]\nE               assert 0 == 2\n\ntest_ret.py:172: AssertionError"}, "attachments": [{"name": "log", "source": "6b983ab6-3de3-4d34-8de8-932551bb02a9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "d4073f15-a302-406b-8be1-2b87e5e8d389-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 2, 'interface': '投资', 'url': '/member/invest', 'method': 'post', 'title': '投资项目不存在', 'data': '{\"member_id\":\"1000337265\",\"loan_id\":\"2064900\",\"amount\":100}', 'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v2\",\"Authorization\":None}', 'excepted': '{\"code\":2,\"msg\":\"该项目不存在\"}', 'result': 'failure', 'auto_script': 'OK', 'check_sql': None}"}], "start": 1619418210900, "stop": 1619418211502, "uuid": "4a32f805-2b63-4a14-8115-869240e1ec06", "historyId": "40f27ff73ab8a2c09e395c56170db3fd", "testCaseId": "4301158e23dffc3fa8c1c0d25eb5aff8", "fullName": "test_ret#test_ret_invest", "labels": [{"name": "suite", "value": "test_ret"}, {"name": "host", "value": "DESKTOP-AC1MULO"}, {"name": "thread", "value": "12600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_ret"}]}