{"name": "test_register[case12]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'OK' == '参数不能为空'\n  - 参数不能为空\n  + OK", "trace": "case = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v1\"}', 'auto_script': 'OK', 'case_id': 13, 'check_sql': None, ...}\n\n    @pytest.mark.parametrize(\"case\",excel)\n    def test_register(case):\n    \n        url =yaml_config_user[\"url\"] +case[\"url\"]\n        data = (case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = case[\"excepted\"]\n        #测试数据  有  #user_name# 传入正确的数据  #phone# 传入已注册的账号 #pwd#传入正确的密码\n        sset = Case_Data()\n        data = sset.re_repelace(data,1)\n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"],url=url,json=eval(data),headers=headers)\n        Midd_Ware.excel_obj(data_path, \"register\").write_data(row=case[\"case_id\"]+1,column=10,value=str(respose[\"msg\"]))\n        print(data)\n        #断言\n        try:\n            assert respose['msg'] == excepted\n            Midd_Ware.logger.info(\"第{}条测试用例通过,请求参数是{}\".format(case[\"case_id\"],data))\n            Midd_Ware.excel_obj(data_path, \"register\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"pass\")\n        except AssertionError as e:\n            Midd_Ware.logger.info(\"第{}条测试用例不通过 ！\\n 请求体是{} 请求内容是{}。预期结果是{}---返回结果是{}\".format(case[\"case_id\"],data,case[\"title\"],excepted,respose[\"msg\"]))\n            Midd_Ware.excel_obj(data_path, \"register\").write_data(row=case[\"case_id\"] + 1, column=9, value=\"failure\")\n>           raise e\n\ntest_register.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncase = {'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v1\"}', 'auto_script': 'OK', 'case_id': 13, 'check_sql': None, ...}\n\n    @pytest.mark.parametrize(\"case\",excel)\n    def test_register(case):\n    \n        url =yaml_config_user[\"url\"] +case[\"url\"]\n        data = (case[\"data\"])\n        headers = eval(case[\"Headers\"])\n        excepted = case[\"excepted\"]\n        #测试数据  有  #user_name# 传入正确的数据  #phone# 传入已注册的账号 #pwd#传入正确的密码\n        sset = Case_Data()\n        data = sset.re_repelace(data,1)\n    \n        #发请求\n        respose = Midd_Ware.req_obj.send_request(method=case[\"method\"],url=url,json=eval(data),headers=headers)\n        Midd_Ware.excel_obj(data_path, \"register\").write_data(row=case[\"case_id\"]+1,column=10,value=str(respose[\"msg\"]))\n        print(data)\n        #断言\n        try:\n>           assert respose['msg'] == excepted\nE           AssertionError: assert 'OK' == '参数不能为空'\nE             - 参数不能为空\nE             + OK\n\ntest_register.py:30: AssertionError"}, "attachments": [{"name": "log", "source": "a2ba2f71-cc50-4b98-8fbd-1e6bca2878de-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "aba15e99-a394-4f28-9b58-bd6393da409f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3ccd3ebd-f1fe-4f7d-94ef-3c0241d4793a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 13, 'interface': '注册', 'url': '/member/register', 'method': 'POST', 'title': '传参：传入正确的参数全部内容, 添加管理员字段传空', 'data': '{\"mobile_phone\":\"#magic_phone#\",\"pwd\": \"12345678978\",\"type\":None}', 'Headers': '{\"Content-Type\":\"application/json\",\"X-Lemonban-Media-Type\":\"lemonban.v1\"}', 'excepted': '参数不能为空', 'result': 'failure', 'auto_script': 'OK', 'check_sql': None}"}], "start": 1619418206111, "stop": 1619418206972, "uuid": "6c7e72e8-5a32-4b03-9b1e-e43638ce58cc", "historyId": "7ca2d6ae007d89eb939194b41c9fb482", "testCaseId": "4f4e34529de0cd69f6e8591cf0d33306", "fullName": "test_register#test_register", "labels": [{"name": "suite", "value": "test_register"}, {"name": "host", "value": "DESKTOP-AC1MULO"}, {"name": "thread", "value": "12600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register"}]}